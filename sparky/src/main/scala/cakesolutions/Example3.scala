package cakesolutions.experiment3

import java.io.{PrintWriter, File}

import org.apache.spark.SparkConf
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.dstream.DStream
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.StreamingContext._
import scala.pickling._
import scala.pickling.binary._
import scala.spores._
import scala.spores.SporePickler._

object SparkWorkflow {

  def write(filename: String, host: String, port: Int): Unit = {
    val workflow = spore {
      (ssc: StreamingContext) => {
        // Create a socket stream on target host:port and count the
        // words in input stream of \n delimited text (eg. generated by 'nc')
        // Note that no duplication in storage level only for running locally.
        // Replication necessary in distributed scenario for fault tolerance.
        val lines = ssc.socketTextStream(capture(host), capture(port), StorageLevel.MEMORY_AND_DISK_SER)
        // FIXME: FlatMappedDStream (return type of lines.flatMap(..)) is package private, and so presumably the spore macros can not access the class instance(?) - hence an explicit DStream type cast?
        val words = lines.flatMap(_.split(" ")).asInstanceOf[DStream[String]].map(_.trim.toLowerCase)
        val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
        wordCounts.print()
      }
    }
    val fd = new PrintWriter(new File(filename))
    try {
      fd.write(new String(workflow.pickle.value))
    } finally {
      fd.close()
    }
  }

  def read(filename: String): Spore[StreamingContext, Unit] = {
    val workflow = scala.io.Source.fromFile(filename).map(_.toByte).toArray
    workflow.unpickle[Spore[StreamingContext, Unit]]
  }

}

/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
 *
 * Usage: example3.Main <filename> <hostname> <port>
 * <filename> is an intermediary file that will hold the serialised Spark workflow (as a Spore).
 * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server:
 *    nc -lk 9999
 * and then run the example:
 *    spark-submit --class cakesolutions.example3.Main --master local[4] --jars `ls -m ./sparky/target/universal/stage/lib/ | tr -d " \n"` ./sparky/target/universal/stage/lib/cakesolutions.sparky-0.1.0-SNAPSHOT.jar /tmp/spark.workflow localhost 9999
 */
object Main {

  def main(args: Array[String]) {
    if (args.length < 2) {
      System.err.println(
        "Usage: example3.Main <filename> <hostname> <port>")
      System.exit(1)
    }

    val Seq(filename, host, port) = args.toSeq
    val sparkConf = new SparkConf().setAppName("Example")
    // Create the context and set the batch size
    val ssc = new StreamingContext(sparkConf, Seconds(5))

    SparkWorkflow.write(filename, host, port.toInt)
    SparkWorkflow.read(filename)(ssc)

    ssc.start()
    ssc.awaitTermination()
  }

}
